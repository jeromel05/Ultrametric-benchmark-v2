um_indexes = []
        temp_shuff_class_index = self.class_index.copy()
        nb_previous_occurences = np.zeros(self.nb_classes, dtype=np.int32)
        temp_shuff_class_index = [np.shuffle(el) for el in temp_shuff_class_index] # shuffle list of indexes

        while True:
            class_to_sample = (np.random.randint(0, high=self.nb_classes-1) // 2) * 2 # select classes
            remaining_class1 = self.temp_shuff_class_index[class_to_sample][nb_previous_occurences[class_to_sample]:]
            remaining_class2 = self.temp_shuff_class_index[class_to_sample+1][nb_previous_occurences[class_to_sample+1]:]

            if len(remaining_class1) < self.nb_samples_per_block or len(remaining_class2) < self.nb_samples_per_block:
                break # got to new epoch
            idx_on_all = np.random.randint(0, high=2, size=self.nb_samples_per_block)
            curr_split_indexes = [remaining_class1[i] if idx > 0 else remaining_class2[i] for i, idx in enumerate(idx_on_all)]

            nb_previous_occurences[class_to_sample] += curr_split_indexes.count(class_to_sample)
            nb_previous_occurences[class_to_sample+1] += curr_split_indexes.count(class_to_sample+1)
            um_indexes.append(curr_split_indexes)

        self.um_indexes = um_indexes
        print(f"classes: ({class_to_sample}, {class_to_sample+1}), {len(um_indexes)}, {um_indexes[:30]}")
        return iter(um_indexes)




def prepare_target(self, ds):
        #filtered_df=pd.DataFrame([(el[0], torch.tensor(el[1], dtype=torch.float))  for el in ds if el[1] in self.classes], columns=[["img", "label"]])
        filtered_df=pd.DataFrame([(el[0],el[1]) for el in ds if el[1] in self.classes], columns=[["img", "label"]])
        class_index = [filtered_df.loc[filtered_df["label"].values == class_label].index for class_label in self.classes]
        #onehot_tensor = to_onehot(label_tensor, num_classes=self.nb_classes)
        #filtered_df["label"] = pd.get_dummies(filtered_df["label"])
        enc = OneHotEncoder(handle_unknown='ignore')
        enc.fit(filtered_df["label"])
        
        onehot_label = enc.transform(filtered_df["label"]).toarray()
        print(onehot_label[:2])

        return filtered_df['img'].values, torch.tensor(onehot_label, dtype=torch.float), class_index
	
